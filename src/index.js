// Generated by LiveScript 1.5.0
/**
 * @package   Detox transport
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2017, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
 */
(function(){
  var COMMAND_DHT, COMMAND_DATA, COMMAND_TAG, COMMAND_UNTAG, ROUTING_PROTOCOL_VERSION, PUBLIC_KEY_LENGTH, MAC_LENGTH, MIN_PACKET_SIZE, ROUTING_PATH_SEGMENT_TIMEOUT, MAX_DATA_SIZE;
  COMMAND_DHT = 0;
  COMMAND_DATA = 1;
  COMMAND_TAG = 2;
  COMMAND_UNTAG = 3;
  ROUTING_PROTOCOL_VERSION = 0;
  PUBLIC_KEY_LENGTH = 32;
  MAC_LENGTH = 16;
  MIN_PACKET_SIZE = 256;
  ROUTING_PATH_SEGMENT_TIMEOUT = 10;
  MAX_DATA_SIZE = Math.pow(2, 24) - 1;
  /**
   * @param {!Uint8Array} array
   *
   * @return {string}
   */
  function array2hex(array){
    var string, i$, len$, byte;
    string = '';
    for (i$ = 0, len$ = array.length; i$ < len$; ++i$) {
      byte = array[i$];
      string += byte.toString(16).padStart(2, 0);
    }
    return string;
  }
  /**
   * @param {string} string
   *
   * @return {!Uint8Array}
   */
  function hex2array(string){
    var array, i$, to$, i;
    array = new Uint8Array(string.length / 2);
    for (i$ = 0, to$ = array.length; i$ < to$; ++i$) {
      i = i$;
      array[i] = parseInt(string.substring(i * 2, i * 2 + 2), 16);
    }
    return array;
  }
  /**
   * @param {string} string
   *
   * @return {!Uint8Array}
   */
  function string2array(string){
    var array, i$, to$, i;
    array = new Uint8Array(string.length);
    for (i$ = 0, to$ = string.length; i$ < to$; ++i$) {
      i = i$;
      array[i] = string.charCodeAt(i);
    }
    return array;
  }
  /**
   * @param {string}		string
   * @param {!Uint8Array}	array
   *
   * @return {boolean}
   */
  function is_string_equal_to_array(string, array){
    return string === array.toString();
  }
  /**
   * @param {!Uint8Array}	address
   * @param {!Uint8Array}	segment_id
   *
   * @return {string}
   */
  function compute_source_id(address, segment_id){
    return address.toString() + segment_id.toString();
  }
  /**
   * @interface
   *
   * @param {!Array<Uint8Array>} introduction_points
   */
  function found_introduction_points(introduction_points){}
  function Transport(detoxCrypto, detoxDht, ronion, jssha, fixedSizeMultiplexer, asyncEventer){
    var simplePeer, webrtcSocket, webtorrentDht, Buffer, x$, y$, z$;
    simplePeer = detoxDht['simple-peer'];
    webrtcSocket = detoxDht['webrtc-socket'];
    webtorrentDht = detoxDht['webtorrent-dht'];
    Buffer = detoxDht['Buffer'];
    /**
     * We'll authenticate remove peers by requiring them to sign SDP by their DHT key
     *
     * @constructor
     *
     * @param {!Object} options
     */
    function simplePeerDetox(options){
      var this$ = this;
      if (!(this instanceof simplePeerDetox)) {
        return new simplePeerDetox(options);
      }
      this._sign = options.sign;
      this._packet_size = options.packet_size;
      this._packets_per_second = options.packets_per_second;
      this._sending = options.initiator;
      this['once']('connect', function(){
        this$._send_delay = 1000 / this$._packets_per_second;
        this$._multiplexer = fixedSizeMultiplexer['Multiplexer'](this$._packet_size, this$._packet_size);
        this$._demultiplexer = fixedSizeMultiplexer['Demultiplexer'](this$._packet_size, this$._packet_size);
        this$._last_sent = +new Date;
        if (this$._sending) {
          this$._real_send();
        }
      });
      simplePeer.call(this, options);
    }
    simplePeerDetox.prototype = Object.create(simplePeer.prototype);
    x$ = simplePeerDetox.prototype;
    /**
     * Dirty hack to get `data` event and handle it the way we want
     */
    x$['emit'] = function(event, data){
      var actual_data, command;
      switch (event) {
      case 'signal':
        data.signature = this._sign(string2array(data['sdp']));
        simplePeer.prototype['emit'].call(this, 'signal', data);
        break;
      case 'data':
        if (this._sending) {
          this['destroy']();
          return;
        } else if (data.length !== this._packet_size) {
          return;
        } else {
          this._demultiplexer['feed'](data);
          while (this._demultiplexer['have_more_data']()) {
            /**
             * @type {!Uint8Array}
             */
            actual_data = this._demultiplexer['get_data']();
            command = actual_data[0];
            if (command === COMMAND_DHT) {
              simplePeer.prototype['emit'].call(this, 'data', actual_data.subarray(1));
            } else {
              simplePeer.prototype['emit'].call(this, 'routing_data', command, actual_data.subarray(1));
            }
          }
          this._sending = true;
          this._real_send();
        }
        break;
      default:
        simplePeer.prototype['emit'].apply(this, arguments);
      }
    };
    /**
     * @param {!Object} signal
     */
    x$['signal'] = function(signal){
      var found_psr, i$, ref$, len$, extension, array, received_packet_size, received_packets_per_second;
      if (!signal.signature || !!signal['extensions']) {
        this['destroy']();
        return;
      }
      this._signature_received = signal.signature;
      this._sdp_received = signal['sdp'];
      found_psr = false;
      for (i$ = 0, len$ = (ref$ = signal['extensions']).length; i$ < len$; ++i$) {
        extension = ref$[i$];
        if (extension.startsWith('psr:')) {
          array = extension.split(':');
          received_packet_size = parseInt(array[1]);
          received_packets_per_second = parseInt(array[2]);
          if (received_packet_size < 1 || received_packets_per_second < 1) {
            this['destroy']();
            return;
          }
          this._packet_size = Math.min(this._packet_size, received_packet_size);
          this._packets_per_second = Math.min(this._packets_per_second, received_packets_per_second);
          found_psr = true;
          break;
        }
      }
      if (!found_psr) {
        this['destroy']();
        return;
      }
      simplePeer.prototype['emit'].call(this, signal);
    };
    /**
     * Data sending method that will be used by DHT
     *
     * @param {Buffer} data
     */
    x$['send'] = function(data){
      this._send_multiplex(data, COMMAND_DHT);
    };
    /**
     * Data sending method that will be used by anonymous routing
     *
     * @param {!Uint8Array}	data
     * @param {number}		command 1..255 - routing data command being sent
     */
    x$._send_routing_data = function(data, command){
      this._send_multiplex(data, command);
    };
    /**
     * Actual data sending method moved here
     *
     * @param {!Uint8Array}	data
     * @param {number}		command
     */
    x$._send_multiplex = function(data, command){
      var x$, data_with_header;
      x$ = data_with_header = new Uint8Array(data.length + 1);
      x$.set([command]);
      x$.set(data, 1);
      this._multiplexer['feed'](data_with_header);
    };
    /**
     * Send a block of multiplexed data to the other side
     */
    x$._real_send = function(){
      var delay, this$ = this;
      delay = Math.max(0, this._send_delay - (new Date - this._last_sent));
      setTimeout(function(){
        if (this$._destroyed) {
          return;
        }
        simplePeer.prototype['send'].call(this$, this$._multiplexer['get_block']());
        this$._sending = false;
        this$._last_sent = +new Date;
      }, delay);
    };
    Object.defineProperty(simplePeerDetox.prototype, 'constructor', {
      enumerable: false,
      value: simplePeerDetox
    });
    /**
     * @param {!Uint8Array} data
     *
     * @return {string}
     */
    function sha3_256(data){
      var shaObj;
      shaObj = new jsSHA('SHA3-256', 'ARRAYBUFFER');
      shaObj['update'](array);
      return shaObj['getHash']('HEX');
    }
    /**
     * @param {!Object} message
     *
     * @return {!Buffer}
     */
    function encode_signature_data(message){
      return bencode['encode'](message).slice(1, -1);
    }
    /**
     * @constructor
     *
     * @param {!Uint8Array}		dht_public_key		Ed25519 public key, temporary one, just for DHT operation
     * @param {!Uint8Array}		dht_private_key		Corresponding Ed25519 private key
     * @param {!Array<string>}	bootstrap_nodes
     * @param {!Array<Object>}	ice_servers
     * @param {number}			packet_size
     * @param {number}			packets_per_second	Each packet send in each direction has exactly the same size and packets are sent at fixed rate (>= 1)
     * @param {number}			bucket_size
     *
     * @return {!DHT}
     *
     * @throws {Error}
     */
    function DHT(dht_public_key, dht_private_key, bootstrap_nodes, ice_servers, packet_size, packets_per_second, bucket_size){
      var x$, this$ = this;
      bucket_size == null && (bucket_size = 2);
      if (!(this instanceof DHT)) {
        return new DHT(dht_public_key, dht_private_key, bootstrap_nodes, ice_servers, packet_size, packets_per_second, bucket_size);
      }
      if (packet_size < MIN_PACKET_SIZE) {
        throw new Error('Minimal supported packet size is ' + MIN_PACKET_SIZE);
      }
      asyncEventer.call(this);
      if (packets_per_second < 1) {
        packets_per_second = 1;
      }
      this._socket = webrtcSocket({
        'simple_peer_constructor': simplePeerDetox,
        'simple_peer_opts': {
          'config': {
            'iceServers': ice_servers
          },
          'packet_size': packet_size,
          'packets_per_second': packets_per_second,
          'sign': function(data){
            return detoxCrypto['sign'](data, dht_public_key, dht_private_key);
          }
        }
      });
      x$ = this._socket;
      x$['on']('node_connected', function(string_id){
        var id, peer_connection;
        id = hex2array(string_id);
        peer_connection = this$._socket['get_id_mapping'](string_id);
        if (!detoxCrypto['verify'](peer_connection._signature_received, peer_connection._sdp_received, id)) {
          peer_connection['destroy']();
        }
        peer_connection['on']('routing_data', function(command, data){
          switch (command) {
          case COMMAND_TAG:
            this$._socket['add_tag'](string_id, 'detox-responder');
            this$['fire']('node_tagged', id);
            break;
          case COMMAND_UNTAG:
            this$._socket['del_tag'](string_id, 'detox-responder');
            this$['fire']('node_untagged', id);
            break;
          case COMMAND_DATA:
            this$['fire']('data', id, data);
          }
        });
        this$['fire']('node_connected', id);
      });
      x$['on']('node_disconnected', function(string_id){
        this$['fire']('node_disconnected', hex2array(string_id));
      });
      this._dht = new webtorrentDht({
        'bootstrap': bootstrap_nodes,
        'extensions': ["psr:" + packet_size + ":" + packets_per_second],
        'hash': sha3_256,
        'k': bucket_size,
        'nodeId': dht_public_key,
        'socket': this._socket,
        'verify': detoxCrypto['verify']
      });
    }
    DHT.prototype = Object.create(asyncEventer.prototype);
    y$ = DHT.prototype;
    /**
     * Start WebSocket server listening on specified ip:port, so that current node will be capable of acting as bootstrap node for other users
     *
     * @param {number}	port
     * @param {string}	ip
     */
    y$['start_bootstrap_node'] = function(port, ip){
      this._dht.listen(port, ip);
    };
    /**
     * @return {!Array<string>}
     */
    y$['get_bootstrap_nodes'] = function(){
      return this._dht.toJSON().nodes;
    };
    /**
     * Start lookup for specified node ID (listen for `node_connected` in order to know when interested node was connected)
     *
     * @param {!Uint8Array} id
     */
    y$['lookup'] = function(id){
      this._dht.lookup(array2hex(id));
    };
    /**
     * Tag connection to specified node ID as used, so that it is not disconnected when not used by DHT itself
     *
     * @param {!Uint8Array} id
     */
    y$['add_used_tag'] = function(id){
      var string_id, peer_connection;
      string_id = array2hex(id);
      peer_connection = this._socket['get_id_mapping'](string_id);
      if (peer_connection) {
        peer_connection._send_routing_data(new Uint8Array(0), COMMAND_TAG);
        this._socket['add_tag'](string_id, 'detox-initiator');
      }
    };
    /**
     * Remove tag from connection, so that it can be disconnected if not needed by DHT anymore
     *
     * @param {!Uint8Array} id
     */
    y$['del_used_tag'] = function(id){
      var string_id, peer_connection;
      string_id = array2hex(id);
      peer_connection = this._socket['get_id_mapping'](string_id);
      if (peer_connection) {
        peer_connection._send_routing_data(new Uint8Array(0), COMMAND_UNTAG);
        this._socket['del_tag'](string_id, 'detox-initiator');
      }
    };
    /**
     * Send data to specified node ID
     *
     * @param {!Uint8Array} id
     * @param {!Uint8Array} data
     */
    y$['send_data'] = function(id, data){
      var string_id, peer_connection;
      if (data.length > this._packet_size) {
        return;
      }
      string_id = array2hex(id);
      peer_connection = this._socket['get_id_mapping'](string_id);
      if (peer_connection) {
        peer_connection._send_routing_data(data, COMMAND_DATA);
      }
    };
    /**
     * Generate message with introduction nodes that can later be published by any node connected to DHT (typically other node than this for anonymity)
     *
     * @param {!Uint8Array}			real_public_key		Ed25519 public key (real one, different from supplied in DHT constructor)
     * @param {!Uint8Array}			real_private_key	Corresponding Ed25519 private key
     * @param {!Array<Uint8Array>}	introduction_points	Array of public keys of introduction points
     *
     * @return {!Object}
     */
    y$['generate_introduction_message'] = function(real_public_key, real_private_key, introduction_points){
      var time, value, i$, len$, index, introduction_point, signature_data, signature;
      time = +new Date;
      value = new Uint8Array(introduction_points.length * PUBLIC_KEY_LENGTH);
      for (i$ = 0, len$ = introduction_points.length; i$ < len$; ++i$) {
        index = i$;
        introduction_point = introduction_points[i$];
        value.set(introduction_point, index * PUBLIC_KEY_LENGTH);
      }
      signature_data = encode_signature_data({
        'seq': time,
        'v': value
      });
      signature = detoxCrypto['sign'](signature_data, real_public_key, real_private_key);
      return {
        'k': real_public_key,
        'seq': time,
        'sig': signature,
        'v': value
      };
    };
    /**
     * Publish message with introduction nodes (typically happens on different node than `generate_introduction_message()`)
     *
     * @param {!Object} message
     */
    y$['publish_introduction_message'] = function(message){
      if (!message['k'] || !message['seq'] || !message['sig'] || !message['v']) {
        return;
      }
      this._dht['put']({
        'k': Buffer.from(message['k']),
        'seq': parseInt(message['seq']),
        'sig': Buffer.from(message['sig']),
        'v': Buffer.from(message['v'])
      });
    };
    /**
     * Find nodes in DHT that are acting as introduction points for specified public key
     *
     * @param {!Uint8Array}					target_public_key
     * @param {!found_introduction_points}	callback
     */
    y$['find_introduction_points'] = function(target_public_key, callback){
      var hash;
      hash = sha3_256(target_public_key);
      this._dht['get'](hash, function(result){
        var introduction_points_bulk, introduction_points, i$, to$, i;
        introduction_points_bulk = Uint8Array.from(result['v']);
        introduction_points = [];
        if (introduction_points_bulk.length % PUBLIC_KEY_LENGTH === 0) {
          return;
        }
        for (i$ = 0, to$ = introduction_points_bulk.length / PUBLIC_KEY_LENGTH; i$ < to$; ++i$) {
          i = i$;
          introduction_points.push(introduction_points_bulk.subarray(i * PUBLIC_KEY_LENGTH, (i + 1) * PUBLIC_KEY_LENGTH));
        }
        callback(introduction_points);
      });
    };
    /**
     * @param {Function} callback
     */
    y$['destroy'] = function(callback){
      this._dht['destroy'](callback);
      delete this._dht;
    };
    Object.defineProperty(DHT.prototype, 'constructor', {
      enumerable: false,
      value: DHT
    });
    /**
     * @constructor
     *
     * @param {!Uint8Array}	dht_private_key			X25519 private key that corresponds to Ed25519 key used in DHT
     * @param {number}		packet_size				Same as in DHT
     * @param {number}		max_pending_segments	How much segments can be in pending state per one address
     *
     * @return {!Router}
     *
     * @throws {Error}
     */
    function Router(dht_private_key, packet_size, max_pending_segments){
      var this$ = this;
      max_pending_segments == null && (max_pending_segments = 10);
      if (!(this instanceof Router)) {
        return new Router(dht_private_key, packet_size, max_pending_segments);
      }
      if (packet_size < MIN_PACKET_SIZE) {
        throw new Error('Minimal supported packet size is ' + MIN_PACKET_SIZE);
      }
      asyncEventer.call(this);
      packet_size = packet_size - 2;
      this._encryptor_instances = new Map;
      this._rewrapper_instances = new Map;
      this._last_node_in_routing_path = new Map;
      this._multiplexer = new Map;
      this._demultiplexer = new Map;
      this._ronion = ronion(ROUTING_PROTOCOL_VERSION, packet_size, PUBLIC_KEY_LENGTH, MAC_LENGTH, max_pending_segments).on('create_request', function(arg$){
        var address, segment_id, command_data, source_id, encryptor_instance, e, rewrapper_instance, address_string, encryptor_instances, rewrapper_instances;
        address = arg$.address, segment_id = arg$.segment_id, command_data = arg$.command_data;
        source_id = compute_source_id(address, segment_id);
        if (this$._encryptor_instances.has(source_id)) {
          return;
        }
        encryptor_instance = detoxCrypto['Encryptor'](false, dht_private_key);
        try {
          encryptor_instance['put_handshake_message'](command_data);
        } catch (e$) {
          e = e$;
          return;
        }
        this$._ronion['create_response'](address, segment_id, encryptor_instance['get_handshake_message']());
        this$._ronion['confirm_incoming_segment_established'](address, segment_id);
        if (!encryptor_instance['ready']()) {
          return;
        }
        rewrapper_instance = encryptor_instance['get_rewrapper_keys']().map(detoxCrypto['Rewrapper']);
        address_string = address.toString();
        encryptor_instances = Object.create(null);
        encryptor_instances[address_string] = encryptor_instance;
        rewrapper_instances = Object.create(null);
        rewrapper_instances[address_string] = rewrapper_instance;
        this$._encryptor_instances.set(source_id, encryptor_instances);
        this$._rewrapper_instances.set(source_id, rewrapper_instances);
        this$._last_node_in_routing_path.set(source_id, address);
      }).on('send', function(arg$){
        var address, packet, node_id;
        address = arg$.address, packet = arg$.packet;
        node_id = address;
        this$.fire('send', {
          node_id: node_id,
          packet: packet
        });
      }).on('data', function(arg$){
        var address, segment_id, command_data, source_id, demultiplexer, data;
        address = arg$.address, segment_id = arg$.segment_id, command_data = arg$.command_data;
        source_id = compute_source_id(address, segment_id);
        demultiplexer = this$._demultiplexer.get(source_id);
        if (!demultiplexer) {
          return;
        }
        demultiplexer['feed'](command_data);
        if (demultiplexer['have_more_data']()) {
          data = demultiplexer['get_data']();
          this$.fire('data', {
            node_id: address,
            route_id: segment_id,
            data: data
          });
        }
      }).on('destroy', function(arg$){
        var address, segment_id;
        address = arg$.address, segment_id = arg$.segment_id;
        this$._destroy_routing_path(address, segment_id);
        this$.fire('destroyed', {
          node_id: address,
          route_id: segment_id
        });
      });
    }
    Router.prototype = Object.create(asyncEventer.prototype);
    z$ = Router.prototype;
    /**
     * Process routing packet coming from node with specified ID
     *
     * @param {!Uint8Array} node_id
     * @param {!Uint8Array} packet
     */
    z$['process_packet'] = function(node_id, packet){
      this._ronion['process_packet'](node_id, packet);
    };
    /**
     * @param {!Array<Uint8Array>} nodes IDs of the nodes through which routing path must be constructed, last node in the list is responder
     *
     * @return {!Promise} Will resolve with ID of the route or will be rejected if path construction fails
     */
    z$['construct_routing_path'] = function(nodes){
      nodes = nodes.slice();
      return new Promise(function(resolve, reject){
        var last_node_in_routing_path, first_node, first_node_string, encryptor_instances, rewrapper_instances, fail, segment_establishment_timeout, route_id, route_id_string, source_id, this$ = this;
        last_node_in_routing_path = nodes[nodes.length - 1];
        first_node = nodes.shift();
        first_node_string = first_node.toString();
        encryptor_instances = Object.create(null);
        rewrapper_instances = Object.create(null);
        fail = function(){
          this$._destroy_routing_path(first_node, route_id);
          throw new Error('Routing path creation failed');
        };
        encryptor_instances[first_node_string] = detoxCrypto['Encryptor'](true, first_node);
        this._ronion.on('create_response', (function(){
          function create_response_handler(arg$){
            var address, segment_id, command_data, e, max_packet_data_size, current_node, current_node_string, segment_extension_timeout;
            address = arg$.address, segment_id = arg$.segment_id, command_data = arg$.command_data;
            if (!is_string_equal_to_array(first_node_string, address) || !is_string_equal_to_array(route_id_string, segment_id)) {
              return;
            }
            clearTimeout(segment_establishment_timeout);
            this._ronion.off('create_response', create_response_handler);
            try {
              encryptor_instances[first_node_string]['put_handshake_message'](command_data);
            } catch (e$) {
              e = e$;
              fail();
            }
            if (!encryptor_instances[first_node_string]['ready']()) {
              fail();
            }
            rewrapper_instances[first_node_string] = encryptor_instances[first_node_string]['get_rewrapper_keys']().map(detoxCrypto['Rewrapper']);
            this._ronion['confirm_outgoing_segment_established'](first_node, route_id);
            max_packet_data_size = encryptor_instances[first_node_string]['get_max_command_data_length']();
            this._multiplexer.set(source_id, fixedSizeMultiplexer['Multiplexer'](MAX_DATA_SIZE, max_packet_data_size));
            this._demultiplexer.set(source_id, fixedSizeMultiplexer['Demultiplexer'](MAX_DATA_SIZE, max_packet_data_size));
            function extend_request(){
              var this$ = this;
              if (!nodes.length) {
                resolve(route_id);
              }
              this._ronion.on('extend_response', (function(){
                function extend_response_handler(arg$){
                  var address, segment_id, command_data, e;
                  address = arg$.address, segment_id = arg$.segment_id, command_data = arg$.command_data;
                  if (!is_string_equal_to_array(current_node_string, address) || !is_string_equal_to_array(route_id_string, segment_id)) {
                    return;
                  }
                  this._ronion.off('extend_response', extend_response_handler);
                  clearTimeout(segment_extension_timeout);
                  if (!command_data.length) {
                    fail();
                  }
                  try {
                    encryptor_instances[current_node_string]['put_handshake_message'](command_data);
                  } catch (e$) {
                    e = e$;
                    fail();
                  }
                  if (!encryptor_instances[current_node_string]['ready']()) {
                    fail();
                  }
                  rewrapper_instances[current_node_string] = encryptor_instances[current_node_string]['get_rewrapper_keys']().map(detoxCrypto['Rewrapper']);
                  this._ronion['confirm_extended_path'](first_node, route_id);
                  extend_request();
                }
                return extend_response_handler;
              }()));
              current_node = nodes.shift();
              current_node_string = current_node.toString();
              encryptor_instances[current_node_string] = detoxCrypto['Encryptor'](true, current_node);
              segment_extension_timeout = setTimeout(function(){
                this$._ronion.off('extend_response', extend_response_handler);
                fail();
              }, ROUTING_PATH_SEGMENT_TIMEOUT);
              this._ronion['extend_request'](current_node, route_id, encryptor_instances[current_node_string]['get_handshake_message']());
            }
            extend_request();
          }
          return create_response_handler;
        }()));
        segment_establishment_timeout = setTimeout(function(){
          this$._ronion.off('create_response', create_response_handler);
          fail();
        }, ROUTING_PATH_SEGMENT_TIMEOUT);
        route_id = this._ronion['create_request'](first_node, encryptor_instances[first_node_string]['get_handshake_message']());
        route_id_string = route_id.toString();
        source_id = compute_source_id(first_node, route_id);
        this._encryptor_instances.set(source_id, encryptor_instances);
        this._rewrapper_instances.set(source_id, rewrapper_instances);
        this._last_node_in_routing_path.set(source_id, last_node_in_routing_path);
      });
    };
    /**
     * @param {!Uint8Array} node_id		First node in routing path
     * @param {!Uint8Array} route_id	Identifier returned during routing path construction
     */
    z$['destroy_routing_path'] = function(node_id, route_id){
      this._destroy_routing_path(node_id, route_id);
    };
    /**
     * Send data to the responder on specified routing path
     *
     * @param {!Uint8Array} node_id		First node in routing path
     * @param {!Uint8Array} route_id	Identifier returned during routing path construction
     * @param {!Uint8Array} data
     */
    z$['send_data'] = function(node_id, route_id, data){
      var source_id, target_address, multiplexer, data_block;
      if (data.length > MAX_DATA_SIZE) {
        return;
      }
      source_id = compute_source_id(node_id, route_id);
      target_address = this._last_node_in_routing_path.get(source_id);
      multiplexer = this._multiplexer.get(source_id);
      if (!multiplexer) {
        return;
      }
      multiplexer['feed'](data);
      while (multiplexer['have_more_blocks']()) {
        data_block = multiplexer['get_block']();
        this._ronion['data'](node_id, route_id, target_address, data_block);
      }
    };
    /**
     * @param {!Uint8Array} address
     * @param {!Uint8Array} segment_id
     */
    z$._destroy_routing_path = function(address, segment_id){
      var source_id, encryptor_instances, i$, encryptor_instance;
      source_id = compute_source_id(address, segment_id);
      encryptor_instances = this._encryptor_instances.has(source_id);
      if (!encryptor_instances) {
        return;
      }
      for (i$ in encryptor_instances) {
        encryptor_instance = encryptor_instances[i$];
        encryptor_instance['destroy']();
        try {
          this._ronion['destroy'](address, segment_id);
        } catch (e$) {}
      }
      this._encryptor_instances['delete'](source_id);
      this._rewrapper_instances['delete'](source_id);
      this._last_node_in_routing_path['delete'](source_id);
      this._multiplexer['delete'](source_id);
      this._demultiplexer['delete'](source_id);
    };
    Object.defineProperty(Router.prototype, 'constructor', {
      enumerable: false,
      value: Router
    });
    return {
      'ready': detoxCrypto['ready'],
      'DHT': DHT,
      'Router': Router
    };
  }
  if (typeof define === 'function' && define['amd']) {
    define(['@detox/crypto', '@detox/dht', 'ronion', 'jssha/src/sha3', 'fixed-size-multiplexer', 'async-eventer'], Transport);
  } else if (typeof exports === 'object') {
    module.exports = Transport(require('@detox/crypto'), require('@detox/dht'), require('ronion'), require('jssha/src/sha3'), require('fixed-size-multiplexer'), require('async-eventer'));
  } else {
    this['detox_transport'] = Transport(this['detox_crypto'], this['detox_dht'], this['ronion'], this['jsSHA'], this['fixed_size_multiplexer'], this['async_eventer']);
  }
}).call(this);
